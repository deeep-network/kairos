# WARNING: This is a base image used internally for Kairos, it is not meant to be built directly, use the images/Dockerfile.kairos-* files instead
###############################################################
####                           ARGS                        ####
###############################################################
# WARNING: While some of the ARGs are not used in this file, they are used in the images/Dockerfile.kairos-* files
# TARGETARCH is used to determine the architecture of the image, it is already set by Docker so it doesn't need to be defined here
ARG FAMILY=ubuntu
# Currently supported flavors are:
#   - ubuntu
ARG FLAVOR
#   - 24.10
#   - 24.04
#   - 22.04
#   - 20.04
ARG FLAVOR_RELEASE
# Currently supported models are:
#   - generic
#   - rpi4
#   - rpi3
ARG MODEL=generic
ARG BASE_IMAGE
ARG VARIANT
ARG VERSION
ARG FRAMEWORK_VERSION=main
ARG BOOTLOADER=systemd-boot

###############################################################
####                     Upstream Images                   ####
###############################################################
FROM ${BASE_IMAGE} AS ubuntu-24.10-upstream
FROM ${BASE_IMAGE} AS ubuntu-24.04-upstream
FROM ${BASE_IMAGE} AS ubuntu-22.04-upstream
FROM ${BASE_IMAGE} AS ubuntu-20.04-upstream

###############################################################
####                build nohang from source               ####
###############################################################
# There's an issue between the nohang package provided by
# Ubuntu and the zfsutils-linux package, there is a fix in
# nohang upstream but it's not yet available in the Ubuntu
# package, so we build it from source
FROM ubuntu:22.04 as nohang-src
WORKDIR /root
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
  make fakeroot git ca-certificates gnupg

RUN git clone -b master --depth=1 https://github.com/hakavlad/nohang.git \
  && cd nohang \
  && echo > deb/DEBIAN/postinst \
  && deb/build.sh

###############################################################
####                Pre-Process Common to All              ####
###############################################################
FROM ${FLAVOR}-${FLAVOR_RELEASE}-upstream AS common
ENV DEBIAN_FRONTEND=noninteractive

RUN  apt-get update \
  && apt-get install -y --no-install-recommends \
    ca-certificates \
    conntrack \
    console-data \
    cloud-guest-utils \
    cryptsetup \
    curl \
    debianutils \
    dosfstools \
    e2fsprogs \
    fdisk \
    file \
    gawk \
    gdisk \
    gettext \
    haveged \
    iproute2 \
    iptables \
    iputils-ping \
    jq \
    krb5-locales \
    less \
    lvm2 \
    nano \
    nbd-client \
    nfs-common \
    open-iscsi \
    open-vm-tools \
    openssh-server \
    parted \
    rsync \
    sudo \
    systemd \
    systemd-timesyncd \
    systemd-container \
    tar \
    ubuntu-advantage-tools \
    xz-utils \
    zstd \
    tpm2-tools \
    tpm2-* \
    opensc \
    && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/*


# Add SaltStack repository and keyring
RUN mkdir -p /etc/apt/keyrings \
    && curl -fsSL -o /etc/apt/keyrings/salt-archive-keyring-2023.gpg https://repo.saltproject.io/salt/py3/ubuntu/24.04/amd64/SALT-PROJECT-GPG-PUBKEY-2023.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/salt-archive-keyring-2023.gpg arch=amd64] https://repo.saltproject.io/salt/py3/ubuntu/24.04/amd64/latest noble main" | tee /etc/apt/sources.list.d/salt.list \
    && curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/noble.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null \
    && curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/noble.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list

# Add Zabbly GPG key and create the source list for Incus
RUN curl -fsSL https://pkgs.zabbly.com/key.asc -o /etc/apt/keyrings/zabbly.asc \
    && printf "Enabled: yes\nTypes: deb\nURIs: https://pkgs.zabbly.com/incus/stable\nSuites: $(. /etc/os-release && echo ${VERSION_CODENAME})\nComponents: main\nArchitectures: $(dpkg --print-architecture)\nSigned-By: /etc/apt/keyrings/zabbly.asc\n" \
    > /etc/apt/sources.list.d/zabbly-incus-stable.sources


RUN  apt-get update \
    && apt-get install -y --no-install-recommends \
      salt-minion \
      incus \
      tailscale \
      libssl-dev \
      libtss2-esys-3.0.2-0 \
      libpam-u2f \
      libssl \
      tpm2-tss \
      libtss2-esys-3.0.2-0 \
      libzmq3 \
      && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Step CLI
RUN curl -L -o step-cli_0.23.2_amd64.deb https://github.com/smallstep/cli/releases/download/v0.23.2/step-cli_0.23.2_amd64.deb \
    && dpkg -i step-cli_0.23.2_amd64.deb \
    && rm step-cli_0.23.2_amd64.deb

# Install nohang
COPY --from=nohang-src /root/nohang/deb/package.deb /tmp/nohang.deb
RUN apt-get install -y --no-install-recommends /tmp/nohang.deb
RUN rm -rf /tmp/nohang.deb

###############################################################
####                  Keylime Build Stage                  ####
###############################################################
# Use a separate stage to build Keylime so build dependencies don't stay in the final image
FROM ubuntu:22.04 AS keylime-build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    build-essential \
    git \
    cargo \
    libssl-dev \
    pkg-config \
    libclang-dev \
    libssl-dev \
    libtss2-dev \
    pkg-config \
    libzmq3-dev \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Clone and build Keylime
RUN git clone https://github.com/keylime/rust-keylime.git /opt/keylime \
    && cd /opt/keylime \
    && cargo build --release

# This target is aimed at UKI images and avoids to install GRUB and any other unnecesary packages
# to the image because there are limitations on the total size
FROM common AS systemd-boot
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN apt-get update && apt-get install -y --no-install-recommends \
  iucode-tool \
  kmod \
  linux-base \
  && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/*
# for UKI, install the linux-modules pkg if no modules are found
RUN [ -z "$(ls -A /lib/modules/)" ] && apt-get update && apt-get install -y --no-install-recommends \
  "$(apt-cache search linux-modules | grep -oP 'linux-modules-\d+.\d+.\d+-\d+-generic' | sort -V | tail -1)" \
  && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/* || true
# for UKI, install the linux-image pkg if no kernel is found
RUN [ -z "$(ls -A /boot/vmlinuz*)" ] && apt-get update && apt-get install -y --no-install-recommends \
  "$(apt-cache search linux-image | grep -oP 'linux-image-\d+.\d+.\d+-\d+-generic' | sort -V | tail -1)" \
  && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/* || true

# This target is aimed at non-UKI images where size is not a concern
FROM common AS grub
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    coreutils \
    dracut \
    dracut-network \
    grub2-common \
    kbd \
    lldpd \
    neovim \
    # this brings grub as a dependency
    shim-signed \
    snmpd \
    squashfs-tools \
    zfsutils-linux \
    && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM systemd-boot AS systemd-boot-amd64
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    shared-mime-info \
    linux-modules-extra-6.8.0-45-generic \
    linux-modules-6.8.0-45-generic \
    && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/*
RUN [ -z "$(ls -A /lib/firmware/amd/)" ] && apt-get update && apt-get install -y --no-install-recommends \
  && apt-get install -y --no-install-recommends amd64-microcode \
  && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/* || true
RUN [ -z "$(ls -A /lib/firmware/intel-ucode/)" ] && apt-get update && apt-get install -y --no-install-recommends \
  && apt-get install -y --no-install-recommends intel-microcode \
  && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/* || true

FROM systemd-boot AS systemd-boot-arm64

FROM systemd-boot-amd64 AS systemd-boot-amd64-24.10
FROM systemd-boot-amd64 AS systemd-boot-amd64-24.04
FROM systemd-boot-arm64 AS systemd-boot-arm64-24.10
FROM systemd-boot-arm64 AS systemd-boot-arm64-24.04

FROM grub AS grub-amd64
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    grub2 \
    grub-efi-amd64-bin \
    grub-efi-amd64-signed \
    grub-pc-bin \
    && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM grub AS grub-arm64
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    grub-efi-arm64 \
    grub-efi-arm64-bin \
    grub-efi-arm64-signed \
    && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM grub-${TARGETARCH} AS grub-current
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    dracut-live \
    && apt-get remove -y unattended-upgrades && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM grub-${TARGETARCH} AS grub-legacy

FROM grub-current AS grub-amd64-current
FROM grub-current AS grub-arm64-current
FROM grub-legacy AS grub-amd64-legacy
FROM grub-legacy AS grub-arm64-legacy

FROM grub-current AS grub-amd64-24.10
FROM grub-current AS grub-amd64-24.04
FROM grub-current AS grub-amd64-22.04
FROM grub-legacy AS grub-amd64-20.04
FROM grub-current AS grub-arm64-24.10
FROM grub-current AS grub-arm64-24.04
FROM grub-current AS grub-arm64-22.04
FROM grub-legacy AS grub-arm64-20.04

###############################################################
####           Common to a Single Architecture             ####
###############################################################

FROM ${BOOTLOADER}-${TARGETARCH}-${FLAVOR_RELEASE} AS amd64
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    dmsetup \
    efibootmgr \
    isc-dhcp-common \
    mdadm \
    ncurses-term \
    networkd-dispatcher \
    packagekit-tools \
    publicsuffix \
    thermald \
    xdg-user-dirs \
    xxd \
    zerofree \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM ${BOOTLOADER}-${TARGETARCH}-${FLAVOR_RELEASE} AS arm64
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    keyutils \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

###############################################################
####            Common to an Arch and Flavor               ####
###############################################################
FROM ${TARGETARCH} AS base-ubuntu-legacy
RUN apt-get update && apt-get install -y --no-install-recommends \
    file \
    fuse \
    patch \
    policykit-1 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM ${TARGETARCH} AS base-ubuntu-current
RUN apt-get update && apt-get install -y --no-install-recommends \
    firmware-sof-signed \
    fuse3 \
    pigz \
    polkitd \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM base-ubuntu-current AS kernel-ubuntu-current
RUN apt-get update
# If a kernel is already installed, don't try to install it again, this way the base image can
# be non-hwe for older releases
RUN [ -z "$(ls -A /boot/vmlinuz*)" ] && apt-get install -y --no-install-recommends \
    linux-image-generic-hwe-24.04 || true
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

FROM kernel-ubuntu-current AS kernel-ubuntu-24.10
FROM kernel-ubuntu-current AS kernel-ubuntu-24.04

FROM base-ubuntu-current AS kernel-ubuntu-22.04
RUN apt-get update
# If a kernel is already installed, don't try to install it again, this way the base image can
# be non-hwe for older releases
RUN [ -z "$(ls -A /boot/vmlinuz*)" ] && apt-get install -y --no-install-recommends \
    linux-image-generic-hwe-22.04 || true
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

FROM base-ubuntu-legacy AS kernel-ubuntu-20.04
# If a kernel is already installed, don't try to install it again, this way the base image can
# be non-hwe for older releases
RUN apt-get update
RUN [ -z "$(ls -A /boot/vmlinuz*)" ] && apt-get install -y --no-install-recommends \
    linux-image-generic-hwe-20.04 || true
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

FROM kernel-ubuntu-24.10 AS amd64-ubuntu-24.10
FROM kernel-ubuntu-24.04 AS amd64-ubuntu-24.04
FROM kernel-ubuntu-22.04 AS amd64-ubuntu-22.04
FROM kernel-ubuntu-20.04 AS amd64-ubuntu-20.04

FROM kernel-ubuntu-24.10 AS arm64-ubuntu-24.10
FROM kernel-ubuntu-24.04 AS arm64-ubuntu-24.04
FROM kernel-ubuntu-22.04 AS arm64-ubuntu-22.04
FROM kernel-ubuntu-20.04 AS arm64-ubuntu-20.04

###############################################################
####               Common to a Single Model                ####
###############################################################
FROM ${TARGETARCH}-${FLAVOR}-${FLAVOR_RELEASE} AS generic
RUN apt-get update && apt-get install -y --no-install-recommends \
    linux-base \
    qemu-guest-agent \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM arm64-${FLAVOR}-${FLAVOR_RELEASE} AS rpicommon
RUN apt-get update && apt-get install -y --no-install-recommends \
    linux-raspi \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
COPY rpi/config.txt /boot/config.txt

FROM rpicommon AS ubuntu-20.04-rpi
RUN apt-get update && apt-get install -y --no-install-recommends \
    linux-firmware-raspi2 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM rpicommon AS ubuntu-22.04-rpi
RUN apt-get update && apt-get install -y --no-install-recommends \
    linux-firmware-raspi \
    linux-modules-extra-raspi \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM generic AS amd64-ubuntu-24.10-generic
FROM generic AS amd64-ubuntu-24.04-generic
FROM generic AS amd64-ubuntu-22.04-generic
FROM generic AS amd64-ubuntu-20.04-generic

FROM generic AS arm64-ubuntu-24.10-generic
FROM generic AS arm64-ubuntu-24.04-generic
FROM ubuntu-22.04-rpi AS arm64-ubuntu-24.04-rpi4
FROM ubuntu-22.04-rpi AS arm64-ubuntu-22.04-rpi3
FROM ubuntu-22.04-rpi AS arm64-ubuntu-22.04-rpi4
FROM ubuntu-20.04-rpi AS arm64-ubuntu-20.04-rpi3
FROM ubuntu-20.04-rpi AS arm64-ubuntu-20.04-rpi4
FROM ubuntu-20.04-upstream AS arm64-ubuntu-20.04-nvidia-jetson-agx-orin

###############################################################
####                Common to a Single Flavor              ####
###############################################################
FROM ${TARGETARCH}-${FLAVOR}-${FLAVOR_RELEASE}-${MODEL} AS ubuntu-latest
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    dbus-user-session \
    pkg-config \
    systemd-hwe-hwdb \
    systemd-resolved \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
# compress firmware (from 23.10, fw files come compressed)
# for some reason \+ is breaking. Using \; instead despite being slower
RUN find /usr/lib/firmware -type f ! -name "*.zst" -execdir zstd --rm -9 {} \;

FROM ubuntu-latest AS ubuntu-latest-selinux
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    isc-dhcp-common \
    isc-dhcp-client \
    selinux-utils \
    selinux-basics \
    selinux-policy-default \
    linux-firmware \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Remove all files in /usr/lib/firmware except the specified ones in mediatek, i915, intel, amd, and their subdirectories
RUN find /usr/lib/firmware \
    ! -path "/usr/lib/firmware" \
    ! -path "/usr/lib/firmware/mediatek" \
    ! -path "/usr/lib/firmware/mediatek/*" \
    ! -path "/usr/lib/firmware/i915" \
    ! -path "/usr/lib/firmware/i915/*" \
    ! -path "/usr/lib/firmware/intel-ucode" \
    ! -path "/usr/lib/firmware/intel-ucode/*" \
    ! -path "/usr/lib/firmware/intel" \
    ! -path "/usr/lib/firmware/intel/*" \
    ! -path "/usr/lib/firmware/amd" \
    ! -path "/usr/lib/firmware/amd/*" \
    ! -path "/usr/lib/firmware/amd-ucode" \
    ! -path "/usr/lib/firmware/amd-ucode/*" \
    ! -path "/usr/lib/firmware/mediatek/*MT7922*.bin" \
    ! -path "/usr/lib/firmware/mediatek/*MT7922*.bin.zst" \
    -type f -exec rm -f {} \;

# Copy the Keylime agent binary and related files from the build stage
COPY --from=keylime-build /opt/keylime/target/release/keylime_agent /usr/local/bin/keylime_agent
COPY --from=keylime-build /opt/keylime/target/release/keylime_ima_emulator /usr/local/bin/keylime_ima_emulator


# Copy configuration files and systemd service units from the build stage
COPY --from=keylime-build /opt/keylime/keylime-agent.conf /etc/keylime/agent.conf
COPY --from=keylime-build /opt/keylime/dist/systemd/system/keylime_agent.service /etc/systemd/system/keylime_agent.service
COPY --from=keylime-build /opt/keylime/dist/systemd/system/var-lib-keylime-secure.mount /etc/systemd/system/var-lib-keylime-secure.mount
COPY --from=keylime-build /opt/keylime/keylime-agent/tests/actions/shim.py /usr/libexec/keylime/shim.py

# Add Salt Minion configuration to use systemd-journald for logging
RUN mkdir -p /etc/salt/
COPY salt/minion /etc/salt/minion

#COPY --from=downloader /chrome-linux /etc/chrome-linux
#RUN ln -s /etc/chrome-linux/chrome /usr/bin/chrome


###############################################################
####           Ansible Stage for SSH Hardening             ####
###############################################################

FROM ubuntu-24.04 as ansible_stage
ARG CACHEBUST=8

# Install additional dependencies if necessary
RUN apt-get update && apt-get install -y --no-install-recommends \
    ssh \
    git \
    ansible \
    wget \
    diffutils \
    patch \
    rsync \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

# Download the collection directly from GitHub
ENV COLLECTION_VERSION="master"

RUN rm -R /tmp

# Clone the collection repository and checkout the specified version
RUN git clone --branch ${COLLECTION_VERSION} --depth 1 https://github.com/dev-sec/ansible-collection-hardening.git /tmp/devsec-hardening

# Replace the disable-systemd-socket.yml since we are not actively running systemd
COPY ansible/disable-systemd-socket.yml /tmp/devsec-hardening/roles/ssh_hardening/tasks/disable-systemd-socket.yml
COPY ansible/main.yml /tmp/devsec-hardening/roles/ssh_hardening/handlers/main.yml

# Build the collection locally
RUN ansible-galaxy collection build /tmp/devsec-hardening --output-path /tmp

# Install the collection from the built tarball
RUN ansible-galaxy collection install /tmp/devsec-hardening-*.tar.gz --force
RUN ansible-galaxy collection install community.general

# Copy the filesystem from the 'common' stage to /mnt/rootfs
COPY --from=common / /mnt/rootfs

# Create copies of the filesystem
RUN rsync -a --exclude='/proc/*' --exclude='/sys/*' --exclude='/dev/*' \
    --exclude='/tmp/*' --exclude='/mnt/*' --exclude='/media/*' --exclude='/run/*' \
    /mnt/rootfs/ /tmp/original_fs/ && \
    mkdir /tmp/modified_fs

# Copy Ansible playbook and requirements
COPY ansible/ssh_hardening.yml /tmp/ssh_hardening.yml
COPY ansible/requirements.yml /tmp/requirements.yml

# Install required Ansible collections
RUN ansible-galaxy collection install -r /tmp/requirements.yml

RUN ansible-playbook -c chroot -i '/mnt/rootfs,' /tmp/ssh_hardening.yml

# Create a copy of the modified filesystem
RUN rsync -a --exclude='/proc/*' --exclude='/sys/*' --exclude='/dev/*' \
    --exclude='/tmp/*' --exclude='/mnt/*' --exclude='/media/*' --exclude='/run/*' \
    /mnt/rootfs/ /tmp/modified_fs/

# Generate diffs between original and modified
RUN diff -ruN /tmp/original_fs/ /tmp/modified_fs/ || true | sed 's#/tmp/original_fs##' | sed 's#/tmp/modified_fs##' | tee /tmp/fs_diff.patch

FROM ubuntu-latest-selinux AS ubuntu-24.10
FROM ubuntu-latest-selinux AS ubuntu-24.04

FROM ${TARGETARCH}-${FLAVOR}-${FLAVOR_RELEASE}-${MODEL} AS ubuntu-legacy
RUN find /usr/lib/firmware -type f ! -name "*.zst" -execdir zstd --rm -9 {} \+

FROM ubuntu-legacy AS ubuntu-22.04
RUN apt-get update
# If the generic kernel is installed we don't want to install HWE related packages
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN apt-cache search linux-image-generic | grep hwe &> /dev/null && apt-get install -y --no-install-recommends \
    systemd-hwe-hwdb
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

FROM ubuntu-legacy AS ubuntu-20.04

###############################################################
####               Post-Process Common to All              ####
###############################################################
FROM ${FLAVOR}-${FLAVOR_RELEASE} AS all
ARG CACHEBUST=8

# compress modules
RUN find /usr/lib/modules -type f -name "*.ko" -execdir zstd --rm -9 {} \+

RUN systemctl enable keylime_agent.service && \
    systemctl enable systemd-networkd && \
    systemctl enable salt-minion && \
    systemctl enable ssh

COPY deeep/monitor_tty1.service /etc/systemd/system/monitor_tty1.service
COPY deeep/monitor_tty1.sh /usr/bin/monitor_tty1.sh

# Install patch utility if not already present
RUN apt-get update && apt-get install -y --no-install-recommends \
    patch \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy the diff patch from 'ansible_stage' & apply patch to the base filesystem
COPY --from=ansible_stage /tmp/fs_diff.patch /tmp/fs_diff1.patch
RUN patch -p1 -d / < /tmp/fs_diff1.patch && rm /tmp/fs_diff1.patch && \
   apt-get remove --purge -y --no-install-recommends \
    patch \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

#This disables interactive login for a secure, remotely managed device
RUN systemctl disable getty@tty1.service && \
    systemctl mask getty@tty1.service && \
    systemctl disable getty@tty2.service && \
    systemctl mask getty@tty2.service && \
    systemctl disable getty@tty3.service && \
    systemctl mask getty@tty3.service && \
    systemctl disable getty@tty4.service && \
    systemctl mask getty@tty4.service && \
    systemctl disable getty@tty5.service && \
    systemctl mask getty@tty5.service  && \
    systemctl disable getty@tty6.service && \
    systemctl mask getty@tty6.service && \
    systemctl disable serial-getty@ttyS0.service && \
    systemctl mask serial-getty@ttyS0.service && \
    systemctl disable getty.target && \
    systemctl mask getty.target && \
    systemctl enable monitor_tty1.service && \
    mkdir -p /etc/systemd/logind.conf.d/ \
    && echo -e "[Login]\nNAutoVTs=0\nReserveVT=0\n" \
    > /etc/systemd/logind.conf.d/override.conf

# Fixup sudo perms
RUN chown root:root /usr/bin/sudo && chmod 4755 /usr/bin/sudo

# Create override for systemd-networkd-wait-online to use any online interface, not waiting for all of them
RUN mkdir -p /etc/systemd/system/systemd-networkd-wait-online.service.d/ \
  && echo -e "[Service]\nExecStart=\nExecStart=/usr/lib/systemd/systemd-networkd-wait-online --any --ipv4" \
  > /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf
